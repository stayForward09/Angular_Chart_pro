{"version":3,"sources":["angular-chart.min.js"],"names":["ChartJsProvider","Chart","window","require","Error","ChartJs","options","responsive","multiTooltipTemplate","colours","this","setOptions","type","angular","extend","$get","ChartJsFactory","canUpdateChart","newVal","oldVal","length","Array","isArray","reduce","sum","carry","val","createChart","scope","elem","data","getColour","getRandomColour","getColours","cvs","ctx","getContext","getDataSets","labels","series","getData","chart","$emit","forEach","action","getEventHandler","legend","setLegend","evt","atEvent","getPointsAtEvent","getBarsAtEvent","getSegmentsAtEvent","activePoints","call","$apply","copy","defaults","global","push","map","convertColour","colour","hexToRgb","substr","getRandomInt","fillColor","rgba","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","min","max","Math","floor","random","alpha","concat","join","hex","bigint","parseInt","r","g","b","datasets","item","i","dataSet","label","value","color","highlight","$parent","parent","$oldLegend","find","generateLegend","replaceWith","append","updateChart","values","dataset","points","bars","dataItem","j","segments","segment","update","isEmpty","Object","keys","restrict","chartType","click","hover","link","resetChart","equals","destroy","container","document","createElement","className","appendChild","G_vmlCanvasManager","initElement","$watch","$on","module","provider","factory","directive"],"mappings":"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","file":"angular-chart.min.js","sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('chart.js', [])\n    .provider('ChartJs', ChartJsProvider)\n    .factory('ChartJsFactory', ['ChartJs', ChartJsFactory])\n    .directive('chartBase', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory(); }])\n    .directive('chartLine', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Line'); }])\n    .directive('chartBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Bar'); }])\n    .directive('chartRadar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Radar'); }])\n    .directive('chartDoughnut', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Doughnut'); }])\n    .directive('chartPie', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Pie'); }])\n    .directive('chartPolarArea', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('PolarArea'); }]);\n\n  /**\n   * Wrapper for chart.js\n   * Allows configuring chart js using the provider\n   *\n   * angular.module('myModule', ['chart.js']).config(function(ChartJsProvider) {\n   *   ChartJsProvider.setOptions({ responsive: true });\n   *   ChartJsProvider.setOptions('Line', { responsive: false });\n   * })))\n   */\n  function ChartJsProvider () {\n    var Chart = (typeof window !== 'undefined' && window.Chart) ||\n      (typeof require !== 'undefined' && require('chart.js'));\n\n    if (typeof Chart !== 'function') {\n      throw new Error('Failed to load chart.js');\n    }\n\n    var ChartJs = {\n      Chart: Chart,\n      options: {\n        responsive: true,\n        multiTooltipTemplate: '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>',\n        colours: [\n          '#97BBCD', // blue\n          '#DCDCDC', // light grey\n          '#F7464A', // red\n          '#46BFBD', // green\n          '#FDB45C', // yellow\n          '#949FB1', // grey\n          '#4D5360'  // dark grey\n        ]\n      }\n    };\n\n    /**\n     * Allow to set global options during configuration\n     */\n    this.setOptions = function (type, options) {\n      // If no type was specified set option for the global object\n      if (!options) {\n        options = type;\n        ChartJs.options = angular.extend(ChartJs.options, options);\n        return;\n      }\n      // Set options for the specific chart\n      ChartJs.options[type] = angular.extend(ChartJs.options[type] || {}, options);\n    };\n\n    this.$get = function () {\n      return ChartJs;\n    };\n  }\n\n  function ChartJsFactory (ChartJs) {\n    return function chart (type) {\n      return {\n        restrict: 'CA',\n        scope: {\n          data: '=',\n          labels: '=',\n          options: '=',\n          series: '=',\n          colours: '=?',\n          getColour: '=?',\n          chartType: '=',\n          legend: '@',\n          click: '=',\n          hover: '='\n        },\n        link: function (scope, elem/*, attrs */) {\n          var chart, container = document.createElement('div');\n          container.className = 'chart-container';\n          elem.replaceWith(container);\n          container.appendChild(elem[0]);\n\n          if (typeof window.G_vmlCanvasManager === 'object' && window.G_vmlCanvasManager !== null) {\n            if (typeof window.G_vmlCanvasManager.initElement === 'function') {\n              window.G_vmlCanvasManager.initElement(elem[0]);\n            }\n          }\n\n          // Order of setting \"watch\" matter\n\n          scope.$watch('data', function (newVal, oldVal) {\n            if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) return;\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            if (chart) {\n              if (canUpdateChart(newVal, oldVal)) return updateChart(chart, newVal, scope);\n              chart.destroy();\n            }\n\n            chart = createChart(chartType, scope, elem);\n          }, true);\n\n          scope.$watch('series', resetChart, true);\n          scope.$watch('labels', resetChart, true);\n          scope.$watch('options', resetChart, true);\n          scope.$watch('colours', resetChart, true);\n\n          scope.$watch('chartType', function (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            if (chart) chart.destroy();\n            chart = createChart(newVal, scope, elem);\n          });\n\n          scope.$on('$destroy', function () {\n            if (chart) chart.destroy();\n          });\n\n          function resetChart (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            // chart.update() doesn't work for series and labels\n            // so we have to re-create the chart entirely\n            if (chart) chart.destroy();\n\n            chart = createChart(chartType, scope, elem);\n          }\n        }\n      };\n    };\n\n    function canUpdateChart (newVal, oldVal) {\n      if (newVal && oldVal && newVal.length && oldVal.length) {\n        return Array.isArray(newVal[0]) ?\n        newVal.length === oldVal.length && newVal[0].length === oldVal[0].length :\n          oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\n      }\n      return false;\n    }\n\n    function sum (carry, val) {\n      return carry + val;\n    }\n\n    function createChart (type, scope, elem) {\n      if (! scope.data || ! scope.data.length) return;\n      scope.getColour = typeof scope.getColour === 'function' ? scope.getColour : getRandomColour;\n      scope.colours = getColours(type, scope);\n      var cvs = elem[0], ctx = cvs.getContext('2d');\n      var data = Array.isArray(scope.data[0]) ?\n        getDataSets(scope.labels, scope.data, scope.series || [], scope.colours) :\n        getData(scope.labels, scope.data, scope.colours);\n      var options = angular.extend({},\n        ChartJs.options,\n        ChartJs.options[type] || {},\n        scope.options);\n\n      var chart = new ChartJs.Chart(ctx)[type](data, options);\n      scope.$emit('create', chart);\n\n      ['hover', 'click'].forEach(function (action) {\n        if (scope[action]) cvs[action === 'click' ? 'onclick' : 'onmousemove'] = getEventHandler(scope, chart, action);\n      });\n      if (scope.legend && scope.legend !== 'false') setLegend(elem, chart);\n      return chart;\n    }\n\n    function getEventHandler (scope, chart, action) {\n      return function (evt) {\n        var atEvent = chart.getPointsAtEvent || chart.getBarsAtEvent || chart.getSegmentsAtEvent;\n        if (atEvent) {\n          var activePoints = atEvent.call(chart, evt);\n          scope[action](activePoints, evt);\n          scope.$apply();\n        }\n      };\n    }\n\n    function getColours (type, scope) {\n      var colours = angular.copy(scope.colours  ||\n        (ChartJs.options[type] && ChartJs.options[type].colours)  ||\n        ChartJs.options.colours ||\n        Chart.defaults.global.colours);\n      while (colours.length < scope.data.length) {\n        colours.push(scope.getColour());\n      }\n      return colours.map(convertColour);\n    }\n\n    function convertColour (colour) {\n      if (typeof colour === 'object' && colour !== null) return colour;\n      if (typeof colour === 'string' && colour[0] === '#') return getColour(hexToRgb(colour.substr(1)));\n      return getRandomColour();\n    }\n\n    function getRandomColour () {\n      var colour = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n      return getColour(colour);\n    }\n\n    function getColour (colour) {\n      return {\n        fillColor: rgba(colour, 0.2),\n        strokeColor: rgba(colour, 1),\n        pointColor: rgba(colour, 1),\n        pointStrokeColor: '#fff',\n        pointHighlightFill: '#fff',\n        pointHighlightStroke: rgba(colour, 0.8)\n      };\n    }\n\n    function getRandomInt (min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function rgba (colour, alpha) {\n      return 'rgba(' + colour.concat(alpha).join(',') + ')';\n    }\n\n    // Credit: http://stackoverflow.com/a/11508164/1190235\n    function hexToRgb (hex) {\n      var bigint = parseInt(hex, 16),\n        r = (bigint >> 16) & 255,\n        g = (bigint >> 8) & 255,\n        b = bigint & 255;\n\n      return [r, g, b];\n    }\n\n    function getDataSets (labels, data, series, colours) {\n      return {\n        labels: labels,\n        datasets: data.map(function (item, i) {\n          var dataSet = angular.copy(colours[i]);\n          dataSet.label = series[i];\n          dataSet.data = item;\n          return dataSet;\n        })\n      };\n    }\n\n    function getData (labels, data, colours) {\n      return labels.map(function (label, i) {\n        return {\n          label: label,\n          value: data[i],\n          color: colours[i].strokeColor,\n          highlight: colours[i].pointHighlightStroke\n        };\n      });\n    }\n\n    function setLegend (elem, chart) {\n      var $parent = elem.parent(),\n          $oldLegend = $parent.find('chart-legend'),\n          legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';\n      if ($oldLegend.length) $oldLegend.replaceWith(legend);\n      else $parent.append(legend);\n    }\n\n    function updateChart (chart, values, scope) {\n      if (Array.isArray(scope.data[0])) {\n        chart.datasets.forEach(function (dataset, i) {\n          (dataset.points || dataset.bars).forEach(function (dataItem, j) {\n            dataItem.value = values[i][j];\n          });\n        });\n      } else {\n        chart.segments.forEach(function (segment, i) {\n          segment.value = values[i];\n        });\n      }\n      chart.update();\n      scope.$emit('update', chart);\n    }\n\n    function isEmpty (value) {\n      return ! value ||\n        (Array.isArray(value) && ! value.length) ||\n        (typeof value === 'object' && ! Object.keys(value).length);\n    }\n\n  }\n})();\n"],"sourceRoot":"/source/"}