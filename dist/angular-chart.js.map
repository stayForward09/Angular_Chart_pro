{"version":3,"file":"angular-chart.js","sources":["angular-chart.js"],"names":["chart","type","restrict","scope","id","data","labels","options","series","chartType","legend","click","link","elem","$watch","newVal","hasDataSets","length","updateChart","createChart","destroy","cvs","document","getElementById","ctx","getContext","getDataSets","getData","Chart","onclick","evt","getPointsAtEvent","getSegmentsAtEvent","activePoints","parent","append","generateLegend","values","datasets","forEach","dataset","i","points","map","point","j","value","segments","segment","update","indexOf","item","dataSet","clone","defaults","global","colours","label","obj","newObj","key","hasOwnProperty","color","strokeColor","highlight","pointHighlightStroke","responsive","multiTooltipTemplate","fillColor","pointColor","pointStrokeColor","pointHighlightFill","angular","module","directive"],"mappings":"CAAA,WACE,YAyEA,SAASA,GAAOC,GACd,OACEC,SAAU,KACVC,OACEC,GAAI,IACJC,KAAM,IACNC,OAAQ,IACRC,QAAS,IACTC,OAAQ,IACRC,UAAW,IACXC,OAAQ,IACRC,MAAO,KAETC,KAAM,SAAUT,EAAOU,GACrB,GAAIb,EAEJG,GAAMW,OAAO,OAAQ,SAAUC,GAC7B,IAAIC,EAAYf,IAAWc,EAAO,GAAGE,OAArC,CACA,GAAIR,GAAYR,GAAQE,EAAMM,SACxBA,KACFT,EAAOkB,EAAalB,EAAOS,EAAWM,GACrCf,EAAQmB,EAAYV,EAAWN,EAAOU,OAC1C,GAEHV,EAAMW,OAAO,YAAa,SAAUC,GAC5BA,IACFf,GAAOA,EAAMoB,UACjBpB,EAAQmB,EAAYJ,EAAQZ,EAAOU,QAM3C,QAASM,GAAalB,EAAME,EAAOU,GACjC,GAAIQ,GAAMC,SAASC,eAAepB,EAAMC,IAAKoB,EAAMH,EAAII,WAAW,MAC9DpB,EAAOW,EAAYf,GAAQyB,EAAYvB,EAAMG,OAAQH,EAAME,KAAMF,EAAMK,YAAgBmB,EAAQxB,EAAMG,OAAQH,EAAME,MACnHL,EAAQ,GAAI4B,OAAMJ,GAAKvB,GAAMI,EAAMF,EAAMI,YAY7C,OAXIJ,GAAMQ,QACRU,EAAIQ,QAAU,SAAUC,GACtB,GAAI9B,EAAM+B,kBAAoB/B,EAAMgC,mBAAoB,CACtD,GAAIC,GAAejB,EAAYf,GAAQD,EAAM+B,iBAAiBD,GAAO9B,EAAMgC,mBAAmBF,EAC9F3B,GAAMQ,MAAMsB,EAAcH,MAI5B3B,EAAMO,QACRG,EAAKqB,SAASC,OAAOnC,EAAMoC,kBAEtBpC,EAGT,QAASkB,GAAalB,EAAOC,EAAMoC,GAC7BrB,EAAYf,GACdD,EAAMsC,SAASC,QAAQ,SAAUC,EAASC,GACxCD,EAAQE,OAASF,EAAQE,OAAOC,IAAI,SAAUC,EAAOC,GAEnD,MADAD,GAAME,MAAQT,EAAOI,GAAGI,GACjBD,MAIX5C,EAAM+C,SAASR,QAAQ,SAAUS,EAASP,GACxCO,EAAQF,MAAQT,EAAOI,KAG3BzC,EAAMiD,SAGR,QAASjC,GAAaf,GACpB,OAAQ,OAAQ,MAAO,SAASiD,QAAQjD,GAAQ,GAGlD,QAASyB,GAAapB,EAAQD,EAAMG,GAClC,OACEF,OAAQA,EACRgC,SAAUjC,EAAKsC,IAAI,SAAUQ,EAAMV,GACjC,GAAIW,GAAUC,EAAMzB,MAAM0B,SAASC,OAAOC,QAAQf,GAGlD,OAFAW,GAAQK,MAAQjD,EAAOiC,GACvBW,EAAQ/C,KAAO8C,EACRC,KAKb,QAASC,GAAOK,GACd,GAAIC,KACJ,KAAK,GAAIC,KAAOF,GACVA,EAAIG,eAAeD,KAAMD,EAAOC,GAAOF,EAAIE,GAEjD,OAAOD,GAGT,QAAShC,GAASrB,EAAQD,GACxB,MAAOC,GAAOqC,IAAI,SAAUc,EAAOhB,GACjC,OACEgB,MAAOA,EACPX,MAAOzC,EAAKoC,GACZqB,MAAOlC,MAAM0B,SAASC,OAAOC,QAAQf,GAAGsB,YACxCC,UAAWpC,MAAM0B,SAASC,OAAOC,QAAQf,GAAGwB,wBAxKlDrC,MAAM0B,SAASC,OAAOW,YAAa,EACnCtC,MAAM0B,SAASC,OAAOY,qBAAuB,6DAE7CvC,MAAM0B,SAASC,OAAOC,UAElBY,UAAW,wBACXL,YAAa,sBACbM,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBN,qBAAsB,0BAGtBG,UAAW,wBACXL,YAAa,sBACbM,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBN,qBAAsB,0BAGtBG,UAAW,sBACXL,YAAa,oBACbM,WAAY,oBACZC,iBAAkB,OAClBC,mBAAoB,OACpBN,qBAAsB,wBAGtBG,UAAW,uBACXL,YAAa,qBACbM,WAAY,qBACZC,iBAAkB,OAClBC,mBAAoB,OACpBN,qBAAsB,yBAGtBG,UAAW,uBACXL,YAAa,qBACbM,WAAY,qBACZC,iBAAkB,OAClBC,mBAAoB,OACpBN,qBAAsB,yBAGtBG,UAAW,wBACXL,YAAa,sBACbM,WAAY,sBACZC,iBAAkB,OAClBC,mBAAoB,OACpBN,qBAAsB,0BAGtBG,UAAW,qBACXL,YAAa,mBACbM,WAAY,mBACZC,iBAAkB,OAClBC,mBAAoB,OACpBN,qBAAsB,qBAI1BO,QAAQC,OAAO,eACZC,UAAU,YAAa,WAAc,MAAO1E,OAC5C0E,UAAU,YAAa,WAAc,MAAO1E,GAAM,UAClD0E,UAAU,WAAY,WAAc,MAAO1E,GAAM,SACjD0E,UAAU,aAAc,WAAc,MAAO1E,GAAM,WACnD0E,UAAU,gBAAiB,WAAc,MAAO1E,GAAM,cACtD0E,UAAU,WAAY,WAAc,MAAO1E,GAAM,SACjD0E,UAAU,iBAAkB,WAAc,MAAO1E,GAAM","sourcesContent":["(function () {\n  \"use strict\";\n\n  Chart.defaults.global.responsive = true;\n  Chart.defaults.global.multiTooltipTemplate = \"<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>\";\n\n  Chart.defaults.global.colours = [\n    { // blue\n      fillColor: \"rgba(151,187,205,0.2)\",\n      strokeColor: \"rgba(151,187,205,1)\",\n      pointColor: \"rgba(151,187,205,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(151,187,205,0.8)\"\n    },\n    { // light grey\n      fillColor: \"rgba(220,220,220,0.2)\",\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,0.8)\"\n    },\n    { // red\n      fillColor: \"rgba(247,70,74,0.2)\",\n      strokeColor: \"rgba(247,70,74,1)\",\n      pointColor: \"rgba(247,70,74,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(247,70,74,0.8)\"\n    },\n    { // green\n      fillColor: \"rgba(70,191,189,0.2)\",\n      strokeColor: \"rgba(70,191,189,1)\",\n      pointColor: \"rgba(70,191,189,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(70,191,189,0.8)\"\n    },\n    { // yellow\n      fillColor: \"rgba(253,180,92,0.2)\",\n      strokeColor: \"rgba(253,180,92,1)\",\n      pointColor: \"rgba(253,180,92,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(253,180,92,0.8)\"\n    },\n    { // grey\n      fillColor: \"rgba(148,159,177,0.2)\",\n      strokeColor: \"rgba(148,159,177,1)\",\n      pointColor: \"rgba(148,159,177,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(148,159,177,0.8)\"\n    },\n    { // dark grey\n      fillColor: \"rgba(77,83,96,0.2)\",\n      strokeColor: \"rgba(77,83,96,1)\",\n      pointColor: \"rgba(77,83,96,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(77,83,96,1)\"\n    }\n  ];\n\n  angular.module(\"chart.js\", [])\n    .directive(\"chartBase\", function () { return chart(); })\n    .directive(\"chartLine\", function () { return chart('Line'); })\n    .directive(\"chartBar\", function () { return chart('Bar'); })\n    .directive(\"chartRadar\", function () { return chart('Radar'); })\n    .directive(\"chartDoughnut\", function () { return chart('Doughnut'); })\n    .directive(\"chartPie\", function () { return chart('Pie'); })\n    .directive(\"chartPolarArea\", function () { return chart('PolarArea'); });\n\n  function chart (type) {\n    return {\n      restrict: 'CA',\n      scope: {\n        id: '@',\n        data: '=',\n        labels: '=',\n        options: '=',\n        series: '=',\n        chartType: '=',\n        legend: '@',\n        click: '='\n      },\n      link: function (scope, elem, attrs) {\n        var chart;\n\n        scope.$watch('data', function (newVal, oldVal) {\n          if (hasDataSets(type) && ! newVal[0].length) return;\n          var chartType = type || scope.chartType;\n          if (! chartType) return;\n          if (chart) updateChart (chart, chartType, newVal);\n          else chart = createChart(chartType, scope, elem);\n        }, true);\n\n        scope.$watch('chartType', function (newVal, oldVal) {\n          if (! newVal) return;\n          if (chart) chart.destroy();\n          chart = createChart(newVal, scope, elem);\n        });\n      }\n    };\n  }\n\n  function createChart (type, scope, elem) {\n    var cvs = document.getElementById(scope.id), ctx = cvs.getContext(\"2d\");\n    var data = hasDataSets(type) ? getDataSets(scope.labels, scope.data, scope.series || []) : getData(scope.labels, scope.data);\n    var chart = new Chart(ctx)[type](data, scope.options || {});\n    if (scope.click) {\n      cvs.onclick = function (evt) {\n        if (chart.getPointsAtEvent || chart.getSegmentsAtEvent) {\n          var activePoints = hasDataSets(type) ? chart.getPointsAtEvent(evt) : chart.getSegmentsAtEvent(evt);\n          scope.click(activePoints, evt);\n        }\n      };\n    }\n    if (scope.legend) {\n      elem.parent().append(chart.generateLegend());\n    }\n    return chart;\n  }\n\n  function updateChart (chart, type, values) {\n    if (hasDataSets(type)){\n      chart.datasets.forEach(function (dataset, i) {\n        dataset.points = dataset.points.map(function (point, j) {\n          point.value = values[i][j];\n          return point;\n        });\n      });\n    } else {\n      chart.segments.forEach(function (segment, i) {\n        segment.value = values[i];\n      });\n    }\n    chart.update();\n  }\n\n  function hasDataSets (type) {\n    return ['Line', 'Bar', 'Radar'].indexOf(type) > -1;\n  }\n\n  function getDataSets (labels, data, series) {\n    return {\n      labels: labels,\n      datasets: data.map(function (item, i) {\n        var dataSet = clone(Chart.defaults.global.colours[i]);\n        dataSet.label = series[i];\n        dataSet.data = item;\n        return dataSet;\n      })\n    };\n  }\n\n  function clone (obj) {\n    var newObj = {};\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) newObj[key] = obj[key];\n    }\n    return newObj;\n  }\n\n  function getData (labels, data) {\n    return labels.map(function (label, i) {\n      return {\n        label: label,\n        value: data[i],\n        color: Chart.defaults.global.colours[i].strokeColor,\n        highlight: Chart.defaults.global.colours[i].pointHighlightStroke\n      };\n    });\n  }\n\n})();"],"sourceRoot":"/source/"}