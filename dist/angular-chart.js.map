{"version":3,"file":"angular-chart.js","sources":["angular-chart.js"],"names":["chart","type","restrict","scope","data","labels","options","series","colours","chartType","legend","click","link","elem","$watch","newVal","oldVal","length","hasDataSets","canUpdateChart","updateChart","destroy","createChart","cvs","ctx","getContext","getDataSets","getData","Chart","onclick","evt","getPointsAtEvent","getSegmentsAtEvent","activePoints","setLegend","$parent","parent","$oldLegend","find","generateLegend","replaceWith","append","values","datasets","forEach","dataset","i","points","bars","dataItem","j","value","segments","segment","update","indexOf","defaults","global","map","item","dataSet","clone","label","obj","newObj","key","hasOwnProperty","color","strokeColor","highlight","pointHighlightStroke","responsive","multiTooltipTemplate","fillColor","pointColor","pointStrokeColor","pointHighlightFill","angular","module","directive"],"mappings":"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","sourcesContent":["(function () {\n  \"use strict\";\n\n  Chart.defaults.global.responsive = true;\n  Chart.defaults.global.multiTooltipTemplate = \"<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>\";\n\n  Chart.defaults.global.colours = [\n    { // blue\n      fillColor: \"rgba(151,187,205,0.2)\",\n      strokeColor: \"rgba(151,187,205,1)\",\n      pointColor: \"rgba(151,187,205,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(151,187,205,0.8)\"\n    },\n    { // light grey\n      fillColor: \"rgba(220,220,220,0.2)\",\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,0.8)\"\n    },\n    { // red\n      fillColor: \"rgba(247,70,74,0.2)\",\n      strokeColor: \"rgba(247,70,74,1)\",\n      pointColor: \"rgba(247,70,74,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(247,70,74,0.8)\"\n    },\n    { // green\n      fillColor: \"rgba(70,191,189,0.2)\",\n      strokeColor: \"rgba(70,191,189,1)\",\n      pointColor: \"rgba(70,191,189,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(70,191,189,0.8)\"\n    },\n    { // yellow\n      fillColor: \"rgba(253,180,92,0.2)\",\n      strokeColor: \"rgba(253,180,92,1)\",\n      pointColor: \"rgba(253,180,92,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(253,180,92,0.8)\"\n    },\n    { // grey\n      fillColor: \"rgba(148,159,177,0.2)\",\n      strokeColor: \"rgba(148,159,177,1)\",\n      pointColor: \"rgba(148,159,177,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(148,159,177,0.8)\"\n    },\n    { // dark grey\n      fillColor: \"rgba(77,83,96,0.2)\",\n      strokeColor: \"rgba(77,83,96,1)\",\n      pointColor: \"rgba(77,83,96,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(77,83,96,1)\"\n    }\n  ];\n\n  angular.module(\"chart.js\", [])\n    .directive(\"chartBase\", function () { return chart(); })\n    .directive(\"chartLine\", function () { return chart('Line'); })\n    .directive(\"chartBar\", function () { return chart('Bar'); })\n    .directive(\"chartRadar\", function () { return chart('Radar'); })\n    .directive(\"chartDoughnut\", function () { return chart('Doughnut'); })\n    .directive(\"chartPie\", function () { return chart('Pie'); })\n    .directive(\"chartPolarArea\", function () { return chart('PolarArea'); });\n\n  function chart (type) {\n    return {\n      restrict: 'CA',\n      scope: {\n        data: '=',\n        labels: '=',\n        options: '=',\n        series: '=',\n        colours: '=',\n        chartType: '=',\n        legend: '@',\n        click: '='\n      },\n      link: function (scope, elem, attrs) {\n        var chart;\n\n        scope.$watch('data', function (newVal, oldVal) {\n          if (! newVal || ! newVal.length || (hasDataSets(type) && ! newVal[0].length)) return;\n          var chartType = type || scope.chartType;\n          if (! chartType) return;\n\n          if (chart) {\n            if (canUpdateChart(chartType, newVal, oldVal)) return updateChart(chart, chartType, newVal);\n            chart.destroy();\n          }\n\n          chart = createChart(chartType, scope, elem);\n        }, true);\n\n        scope.$watch('chartType', function (newVal, oldVal) {\n          if (! newVal) return;\n          if (chart) chart.destroy();\n          chart = createChart(newVal, scope, elem);\n        });\n      }\n    };\n  }\n\n  function canUpdateChart(type, newVal, oldVal) {\n    if (newVal && oldVal && newVal.length && oldVal.length) {\n      return hasDataSets(type) ?\n        newVal[0].length === oldVal[0].length :\n        newVal.length === oldVal.length;\n    }\n    return false;\n  }\n\n  function createChart (type, scope, elem) {\n    var cvs = elem[0], ctx = cvs.getContext(\"2d\");\n    var data = hasDataSets(type) ?\n      getDataSets(scope.labels, scope.data, scope.series || [], scope.colours) :\n      getData(scope.labels, scope.data, scope.colours);\n    var chart = new Chart(ctx)[type](data, scope.options || {});\n    if (scope.click) {\n      cvs.onclick = function (evt) {\n        if (chart.getPointsAtEvent || chart.getSegmentsAtEvent) {\n          var activePoints = hasDataSets(type) ? chart.getPointsAtEvent(evt) : chart.getSegmentsAtEvent(evt);\n          scope.click(activePoints, evt);\n        }\n      };\n    }\n    if (scope.legend) setLegend(elem, chart);\n    return chart;\n  }\n\n  function setLegend (elem, chart) {\n    var $parent = elem.parent(),\n        $oldLegend = $parent.find('chart-legend'),\n        legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';\n    if ($oldLegend.length) $oldLegend.replaceWith(legend);\n    else $parent.append(legend);\n  }\n\n  function updateChart (chart, type, values) {\n    if (hasDataSets(type)){\n        chart.datasets.forEach(function (dataset, i) {\n          (dataset.points || dataset.bars).forEach(function (dataItem, j) {\n            dataItem.value = values[i][j];\n          });\n      });\n    } else {\n      chart.segments.forEach(function (segment, i) {\n        segment.value = values[i];\n      });\n    }\n    chart.update();\n  }\n\n  function hasDataSets (type) {\n    return ['Line', 'Bar', 'Radar'].indexOf(type) > -1;\n  }\n\n  function getDataSets (labels, data, series, colours) {\n    colours = colours || Chart.defaults.global.colours;\n    return {\n      labels: labels,\n      datasets: data.map(function (item, i) {\n        var dataSet = clone(colours[i]);\n        dataSet.label = series[i];\n        dataSet.data = item;\n        return dataSet;\n      })\n    };\n  }\n\n  function clone (obj) {\n    var newObj = {};\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) newObj[key] = obj[key];\n    }\n    return newObj;\n  }\n\n  function getData (labels, data, colours) {\n    colours = colours || Chart.defaults.global.colours;\n    return labels.map(function (label, i) {\n      return {\n        label: label,\n        value: data[i],\n        color: colours[i].strokeColor,\n        highlight: colours[i].pointHighlightStroke\n      };\n    });\n  }\n\n})();\n"],"sourceRoot":"/source/"}