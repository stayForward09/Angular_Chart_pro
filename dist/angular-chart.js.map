{"version":3,"file":"angular-chart.js","sources":["angular-chart.js"],"names":["chart","type","restrict","scope","id","data","labels","options","series","colours","chartType","legend","click","link","elem","$watch","newVal","hasDataSets","length","updateChart","createChart","destroy","cvs","document","getElementById","ctx","getContext","getDataSets","getData","Chart","onclick","evt","getPointsAtEvent","getSegmentsAtEvent","activePoints","setLegend","$parent","parent","$oldLegend","find","generateLegend","replaceWith","append","values","datasets","forEach","dataset","i","points","bars","dataItem","j","value","segments","segment","update","indexOf","console","log","defaults","global","map","item","dataSet","clone","label","obj","newObj","key","hasOwnProperty","color","strokeColor","highlight","pointHighlightStroke","responsive","multiTooltipTemplate","fillColor","pointColor","pointStrokeColor","pointHighlightFill","angular","module","directive"],"mappings":"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","sourcesContent":["(function () {\n  \"use strict\";\n\n  Chart.defaults.global.responsive = true;\n  Chart.defaults.global.multiTooltipTemplate = \"<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>\";\n\n  Chart.defaults.global.colours = [\n    { // blue\n      fillColor: \"rgba(151,187,205,0.2)\",\n      strokeColor: \"rgba(151,187,205,1)\",\n      pointColor: \"rgba(151,187,205,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(151,187,205,0.8)\"\n    },\n    { // light grey\n      fillColor: \"rgba(220,220,220,0.2)\",\n      strokeColor: \"rgba(220,220,220,1)\",\n      pointColor: \"rgba(220,220,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,220,0.8)\"\n    },\n    { // red\n      fillColor: \"rgba(247,70,74,0.2)\",\n      strokeColor: \"rgba(247,70,74,1)\",\n      pointColor: \"rgba(247,70,74,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(247,70,74,0.8)\"\n    },\n    { // green\n      fillColor: \"rgba(70,191,189,0.2)\",\n      strokeColor: \"rgba(70,191,189,1)\",\n      pointColor: \"rgba(70,191,189,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(70,191,189,0.8)\"\n    },\n    { // yellow\n      fillColor: \"rgba(253,180,92,0.2)\",\n      strokeColor: \"rgba(253,180,92,1)\",\n      pointColor: \"rgba(253,180,92,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(253,180,92,0.8)\"\n    },\n    { // grey\n      fillColor: \"rgba(148,159,177,0.2)\",\n      strokeColor: \"rgba(148,159,177,1)\",\n      pointColor: \"rgba(148,159,177,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(148,159,177,0.8)\"\n    },\n    { // dark grey\n      fillColor: \"rgba(77,83,96,0.2)\",\n      strokeColor: \"rgba(77,83,96,1)\",\n      pointColor: \"rgba(77,83,96,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightFill: \"#fff\",\n      pointHighlightStroke: \"rgba(77,83,96,1)\"\n    }\n  ];\n\n  angular.module(\"chart.js\", [])\n    .directive(\"chartBase\", function () { return chart(); })\n    .directive(\"chartLine\", function () { return chart('Line'); })\n    .directive(\"chartBar\", function () { return chart('Bar'); })\n    .directive(\"chartRadar\", function () { return chart('Radar'); })\n    .directive(\"chartDoughnut\", function () { return chart('Doughnut'); })\n    .directive(\"chartPie\", function () { return chart('Pie'); })\n    .directive(\"chartPolarArea\", function () { return chart('PolarArea'); });\n\n  function chart (type) {\n    return {\n      restrict: 'CA',\n      scope: {\n        id: '@',\n        data: '=',\n        labels: '=',\n        options: '=',\n        series: '=',\n        colours: '=',\n        chartType: '=',\n        legend: '@',\n        click: '='\n      },\n      link: function (scope, elem, attrs) {\n        var chart;\n\n        scope.$watch('data', function (newVal, oldVal) {\n          if (hasDataSets(type) && ! newVal[0].length) return;\n          var chartType = type || scope.chartType;\n          if (! chartType) return;\n          if (chart) updateChart(chart, chartType, newVal);\n          else chart = createChart(chartType, scope, elem);\n        }, true);\n\n        scope.$watch('chartType', function (newVal, oldVal) {\n          if (! newVal) return;\n          if (chart) chart.destroy();\n          chart = createChart(newVal, scope, elem);\n        });\n      }\n    };\n  }\n\n  function createChart (type, scope, elem) {\n    var cvs = document.getElementById(scope.id), ctx = cvs.getContext(\"2d\");\n    var data = hasDataSets(type) ? getDataSets(scope.labels, scope.data, scope.series || [], scope.colours) : getData(scope.labels, scope.data);\n    var chart = new Chart(ctx)[type](data, scope.options || {});\n    if (scope.click) {\n      cvs.onclick = function (evt) {\n        if (chart.getPointsAtEvent || chart.getSegmentsAtEvent) {\n          var activePoints = hasDataSets(type) ? chart.getPointsAtEvent(evt) : chart.getSegmentsAtEvent(evt);\n          scope.click(activePoints, evt);\n        }\n      };\n    }\n    if (scope.legend) setLegend(elem, chart);\n    return chart;\n  }\n\n  function setLegend (elem, chart) {\n    var $parent = elem.parent(),\n        $oldLegend = $parent.find('chart-legend'),\n        legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';\n    if ($oldLegend.length) $oldLegend.replaceWith(legend);\n    else $parent.append(legend);\n  }\n\n  function updateChart (chart, type, values) {\n    if (hasDataSets(type)){\n        chart.datasets.forEach(function (dataset, i) {\n          (dataset.points || dataset.bars).forEach(function (dataItem, j) {\n            dataItem.value = values[i][j];\n          });\n      });\n    } else {\n      chart.segments.forEach(function (segment, i) {\n        segment.value = values[i];\n      });\n    }\n    chart.update();\n  }\n\n  function hasDataSets (type) {\n    return ['Line', 'Bar', 'Radar'].indexOf(type) > -1;\n  }\n\n  function getDataSets (labels, data, series, colours) {\n    console.log(colours);\n    colours = colours || Chart.defaults.global.colours;\n    return {\n      labels: labels,\n      datasets: data.map(function (item, i) {\n        var dataSet = clone(colours[i]);\n        dataSet.label = series[i];\n        dataSet.data = item;\n        return dataSet;\n      })\n    };\n  }\n\n  function clone (obj) {\n    var newObj = {};\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) newObj[key] = obj[key];\n    }\n    return newObj;\n  }\n\n  function getData (labels, data, colours) {\n    return labels.map(function (label, i) {\n      colours = colours || Chart.defaults.global.colours;\n      return {\n        label: label,\n        value: data[i],\n        color: colours[i].strokeColor,\n        highlight: colours[i].pointHighlightStroke\n      };\n    });\n  }\n\n})();"],"sourceRoot":"/source/"}